{"version":3,"sources":["components/Product/Product.js","containers/App/App.js","serviceWorker.js","index.js"],"names":["Product","props","useState","selected","setSelected","mouseState","setMouseState","selectProduct","disabled","className","onClick","onMouseEnter","onMouseLeave","name","conteins","description","map","item","index","key","weight","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iQAgDeA,MA7Cf,SAAiBC,GAAQ,IAAD,EAEYC,oBAAS,GAFrB,mBAEbC,EAFa,KAEHC,EAFG,OAGgBF,oBAAS,GAHzB,mBAGbG,EAHa,KAGDC,EAHC,KAKdC,EAAgB,WACbN,EAAMO,UACPJ,GAAaD,IAIrB,OACI,6BACI,yBACIM,UAAW,WAAaN,EAAW,qBAAuB,KAAOF,EAAMO,SAAW,qBAAuB,IACzGE,QAASH,EACTI,aAAc,kBAAML,EAAcH,IAClCS,aAAc,kBAAMN,GAAc,KAElC,yBAAKG,UAAU,mBACVN,GAAYE,EAAa,yHAAiC,sJAG/D,yBAAKI,UAAU,iBAAiBR,EAAMY,MACtC,yBAAKJ,UAAU,qBAAqBR,EAAMa,UAC1C,yBAAKL,UAAU,wBAAwBR,EAAMc,YAAYC,KAAI,SAACC,EAAMC,GAAP,OAAiB,yBAAKC,IAAKD,GAAQD,OAChG,yBAAKR,UAAU,mBACX,yBAAKA,UAAU,2BAA2BR,EAAMmB,QAChD,yBAAKX,UAAU,yBAAf,kBAGR,yBAAKA,UAAU,eACVR,EAAMO,SACH,0BAAMC,UAAU,qBAAhB,qDAA+CR,EAAMa,SAArD,kEAEAX,EACIF,EAAME,SAEN,2KAA6B,0BAAMM,UAAU,oBAAoBC,QAASH,GAA7C,4BAAuE,uCCM7Gc,MA1Cf,WACI,OACI,0BAAMZ,UAAU,kBACZ,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,sCAAf,uIAEJ,yBAAKA,UAAU,OACX,yBAAKA,UAAU,0CACX,kBAAC,EAAD,CACII,KAAK,6CACLC,SAAS,+CACTC,YAAa,CAAC,oCAAE,oCAAF,yCAA6B,8EAC3CK,OAAO,MACPjB,SAAS,+LAGjB,yBAAKM,UAAU,yCACX,kBAAC,EAAD,CACII,KAAK,6CACLC,SAAS,wCACTC,YAAa,CAAC,oCAAE,oCAAF,yCAA6B,oCAAE,mCAAF,gFAC3CK,OAAO,IACPjB,SAAS,uPAGjB,yBAAKM,UAAU,yCACX,kBAAC,EAAD,CACII,KAAK,6CACLC,SAAS,wCACTC,YAAa,CAAC,oCAAE,qCAAF,yCAA8B,oCAAE,mCAAF,qFAAqC,+FACjFK,OAAO,IACPjB,SAAS,8LACTK,UAAU,SC1BlBc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SD0HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.91c638b3.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './Product.css';\n\nfunction Product(props) {\n\n    const [selected, setSelected] = useState(false);\n    const [mouseState, setMouseState] = useState(false);\n\n    const selectProduct = () => {\n        if (!props.disabled) {\n            setSelected(!selected);\n        }\n    }\n\n    return (\n        <div>\n            <div\n                className={\"product\" + (selected ? \" product--selected\" : \"\") + (props.disabled ? \" product--disabled\" : \"\")}\n                onClick={selectProduct}\n                onMouseEnter={() => setMouseState(selected)}\n                onMouseLeave={() => setMouseState(false)}\n            >\n                <div className=\"product__slogan\">\n                    {selected && mouseState ? <span>Коте не одобряет?</span> : \"Сказочное заморское явство\"}\n                </div>\n\n                <div className=\"product__name\">{props.name}</div>\n                <div className=\"product__conteins\">{props.conteins}</div>\n                <div className=\"product__description\">{props.description.map((item, index) => <div key={index}>{item}</div>)}</div>\n                <div className=\"product__weight\">\n                    <div className=\"product__weight-counter\">{props.weight}</div>\n                    <div className=\"product__weight-units\">КГ</div>\n                </div>\n            </div>\n            <div className=\"product-fab\">\n                {props.disabled ?\n                    <span className=\"product-fab__over\">Печалька, {props.conteins} закончился.</span>\n                    :\n                    selected ?\n                        props.selected\n                        :\n                        <>Чего сидишь? Порадуй котэ, <span className=\"product-fab__link\" onClick={selectProduct}>купи</span><span>.</span></>\n                }\n            </div>\n        </div>\n    );\n}\n\nexport default Product;\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\nimport Product from '../../components/Product/Product';\n\nfunction App() {\n    return (\n        <main className=\"app__container\">\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-12 text-center pb-3 app__title\">Ты сегодня покормил кота?</div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-12 col-md-12 col-xl-4 app__product\">\n                        <Product\n                            name=\"Нямушка\"\n                            conteins=\"с фуа-гра\"\n                            description={[<><span>10</span> порций</>, \"мышь в подарок\"]}\n                            weight=\"0,5\"\n                            selected=\"Печень утки разварная с артишоками.\"\n                        />\n                    </div>\n                    <div className=\"col-12 col-md-6 col-xl-4 app__product\">\n                        <Product\n                            name=\"Нямушка\"\n                            conteins=\"с рыбой\"\n                            description={[<><span>40</span> порций</>, <><span>2</span> мыши в подарок</>]}\n                            weight=\"2\"\n                            selected=\"Головы щучьи с чесноком да свежайшая сёмгушка.\"\n                        />\n                    </div>\n                    <div className=\"col-12 col-md-6 col-xl-4 app__product\">\n                        <Product\n                            name=\"Нямушка\"\n                            conteins=\"с курой\"\n                            description={[<><span>100</span> порций</>, <><span>5</span> мышей в подарок</>, \"заказчик доволен\"]}\n                            weight=\"5\"\n                            selected=\"Филе из цыплят с трюфелями в бульоне.\"\n                            disabled={true}\n                        />\n                    </div>\n                </div>\n            </div>\n        </main>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}